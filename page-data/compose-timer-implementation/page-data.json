{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/compose-timer-implementation/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Anton Danshin's Blog"}},"markdownRemark":{"id":"0f69fca0-7040-5cbd-94d3-8cdce7c0d88f","excerpt":"Most of components we write with Jetpack Compose are stateless and contain minimum logic. The general advice is to follow principle of state hoisting, when the…","html":"<p>Most of components we write with Jetpack Compose are stateless and contain minimum logic. The general advice is to follow principle of <a href=\"https://developer.android.com/jetpack/compose/state#state-hoisting\">state hoisting</a>, when the state is passed to a <code class=\"language-text\">@Composable</code> function as a parameter.</p>\n<p>There are cases where adding internal state to your UI components is better than following the state-hositing rule to the letter and managing state within a ViewModel. One of the typical example is animations, that often requires introduction of some transient state (e.g. offset or color). I really like how I can breathe some life into my components (by writing some state management inside) – literally animate them.</p>\n<p>But this post is not about stateful components or statemenegement. I have a more concrete problem I would like to discuss here. In my app I need to display some sort of timers and clocks in several places, so I thought it would be nice to make a stateful component for it. I looked online and found several good and bad implementations of it. So I decided to share my views and how I would go about this problem.</p>\n<h2>The problem</h2>\n<p>Let’s set our goal first. We want to implement a component that allows you to display a countdown timer.</p>\n<ul>\n<li>There shouldn’t be any assumption on how it will be displayed: it can be a <code class=\"language-text\">Text()</code>, <code class=\"language-text\">Canvas()</code> or anything, but we know it will be used in a <code class=\"language-text\">@Composable</code> context.</li>\n<li>The first displayed state should be initial state</li>\n<li>The last displayed state must be 0 (never negative).</li>\n</ul>\n<h2>Simple solution – Naive approach</h2>\n<p>The first thing that comes to mind is to create a function that would launch a corotine in a loop and decrement a given time interval until it reaches 0:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">CountdownTimer</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token operator\">:</span> Long<span class=\"token punctuation\">,</span> step<span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> onTick<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@Composable</span> <span class=\"token punctuation\">(</span>Long<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> timeLeft <span class=\"token keyword\">by</span> <span class=\"token function\">remember</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onTick</span><span class=\"token punctuation\">(</span>timeLeft<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>isActive <span class=\"token operator\">&amp;&amp;</span> timeLeft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            timeLeft <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>timeLeft <span class=\"token operator\">-</span> step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">coerceAtLeast</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">onTick</span><span class=\"token punctuation\">(</span>timeLeft<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It will work, but it has several obvious problems:</p>\n<ul>\n<li>The last delay could be longer than actually needed, so <code class=\"language-text\">0</code> state will be rendered with up to 99 ms delay.</li>\n<li>There is not account of time that took to execute <code class=\"language-text\">onTick()</code>, and there is no guarantee that <code class=\"language-text\">delay(n)</code> will return resume after exactly <code class=\"language-text\">n</code> ms.</li>\n</ul>\n<p>The first problem can be quickly fixed by making sure we never <code class=\"language-text\">delay</code> by more than <code class=\"language-text\">timeLeft</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">CountdownTimer</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token operator\">:</span> Long<span class=\"token punctuation\">,</span> step<span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> onTick<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@Composable</span> <span class=\"token punctuation\">(</span>Long<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> timeLeft <span class=\"token keyword\">by</span> <span class=\"token function\">remember</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onTick</span><span class=\"token punctuation\">(</span>timeLeft<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>isActive <span class=\"token operator\">&amp;&amp;</span> timeLeft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            timeLeft <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>timeLeft <span class=\"token operator\">-</span> step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">coerceAtLeast</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">onTick</span><span class=\"token punctuation\">(</span>timeLeft<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">.</span><span class=\"token function\">coreceAtMost</span><span class=\"token punctuation\">(</span>timeLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To fix second problem we need to use system clock.</p>\n<h2>Better solution – Using SystemClock</h2>\n<p>Instead of <code class=\"language-text\">System.currentTimeMillis()</code> available in Java, for this particular task it is recommented to use some monotonic time source, such as Android <code class=\"language-text\">SystemClock.uptimeMillis()</code>.</p>\n<p>The idea is to remember when we started our timer in <code class=\"language-text\">startTime</code> and on each cycle of the loop check how much time has actually passed (<code class=\"language-text\">duration</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">CountdownTimer</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token operator\">:</span> Long<span class=\"token punctuation\">,</span> step<span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> onTick<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@Composable</span> <span class=\"token punctuation\">(</span>Long<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> timeLeft <span class=\"token keyword\">by</span> <span class=\"token function\">remember</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onTick</span><span class=\"token punctuation\">(</span>timeLeft<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> startTime <span class=\"token operator\">=</span> SystemClock<span class=\"token punctuation\">.</span><span class=\"token function\">uptimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>isActive <span class=\"token operator\">&amp;&amp;</span> timeLeft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// how much time actually passed</span>\n            <span class=\"token keyword\">val</span> duration <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SystemClock<span class=\"token punctuation\">.</span><span class=\"token function\">uptimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">coerceAtLeast</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            timeLeft <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>initialMillis <span class=\"token operator\">-</span> duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">coerceAtLeast</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">onTick</span><span class=\"token punctuation\">(</span>timeLeft<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">.</span><span class=\"token function\">coerceAtMost</span><span class=\"token punctuation\">(</span>timeLeft<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Testable solution – Using withFrameMillis</h2>\n<p>The privious solution works perfectly fine, but if we were to publish it as a library and let other people use it, we would probably want to add some tests to it.</p>\n<p>Without mocking <code class=\"language-text\">SystemClock.uptimeMillis()</code>, which would be not a good idea, it is impossible to test. Luckily for us, compose has its own monotonic clock built-in – <code class=\"language-text\">MonotonicFrameClock</code>. It is an abstraction over Choreographer, if we provide another implementation in unit-tests, it will allow to control time there.</p>\n<p>Here is how we can rewrite our component to use this <code class=\"language-text\">withFrameMillis()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token annotation builtin\">@OptIn</span><span class=\"token punctuation\">(</span>ExperimentalComposeApi<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">CountdownTimer</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token operator\">:</span> Long<span class=\"token punctuation\">,</span> step<span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> onTick<span class=\"token operator\">:</span> <span class=\"token annotation builtin\">@Composable</span> <span class=\"token punctuation\">(</span>Long<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> timeLeft <span class=\"token keyword\">by</span> <span class=\"token function\">remember</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>initialMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onTick</span><span class=\"token punctuation\">(</span>timeLeft<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> startTime <span class=\"token operator\">=</span> withFrameMillis <span class=\"token punctuation\">{</span> it <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>isActive <span class=\"token operator\">&amp;&amp;</span> timeLeft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// how much time actually passed</span>\n            withFrameMillis <span class=\"token punctuation\">{</span> time <span class=\"token operator\">-></span>\n                <span class=\"token keyword\">val</span> duration <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">coerceAtLeast</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                timeLeft <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>initialMillis <span class=\"token operator\">-</span> duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">coerceAtLeast</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">onTick</span><span class=\"token punctuation\">(</span>timeLeft<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">.</span><span class=\"token function\">coerceAtMost</span><span class=\"token punctuation\">(</span>timeLeft<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The advantage of this implementation is that it can be testable just like other components with animations.\nHovever, I also see several small issues with this approach:</p>\n<ul>\n<li>The timer is tied to the display refresh rate, which means no mater how small we set the step, the loop will suspend on each frame.</li>\n<li>It now starts counting from the next frame, rather than immediately.</li>\n<li>It probably introduces more overhead due to abstractions and callback (compared to system call to <code class=\"language-text\">SystemClock.uptimeMillis()</code>).</li>\n</ul>\n<p>Inspite of all this, I still had fun digging into it.</p>\n<h2>Conclusion</h2>\n<p>We’ve looked into several implementations of a countdown timer in Jetpack Compose. I am sure there are more and we just scratched the surface. I would personally use the approach with <code class=\"language-text\">SystemClock.uptimeMillis()</code>, but I think that <code class=\"language-text\">withFrameMillis()</code> isn’t such a bad idea either. Let me know what you think. :)</p>","fields":{"readingTime":{"text":"5 min read"}},"frontmatter":{"title":"Countdown timer with Jetpack Compose","date":"September 28, 2021","updated":"September 28, 2021","description":"Different approaches to implementing timer with Jetpack Compose.","draft":false}},"previous":null,"next":{"fields":{"slug":"/updating-to-android-gradle-plugin-7/"},"frontmatter":{"title":"Upgraded my project to Android gradle plugin 7"}}},"pageContext":{"id":"0f69fca0-7040-5cbd-94d3-8cdce7c0d88f","nextPostId":"3d4de3dc-9dc4-5a81-a6fb-f33428fd18ab"}},
    "staticQueryHashes": ["2841359383","3274528899"]}