{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/easy-interview-questions/","result":{"data":{"site":{"siteMetadata":{"title":"Anton Danshin"}},"markdownRemark":{"id":"ca94b271-4455-5d88-af93-c4826fee576e","excerpt":"I have interviewed more than 100 different people throughout my 7-year career as an Android engineer. In this blog post, I would like to share some very easy…","html":"<p>I have interviewed more than 100 different people throughout my 7-year career as an Android engineer. In this blog post, I would like to share some very easy questions that I often asked during phone screens and even some normal interview rounds.</p>\n<p>These are all fundamental stuff that I wish all Java/Kotlin programmers knew, but practice shows that still many people are not able to give a complete or correct answer to them. I hope someone finds it useful for their interview preparation and won’t make mistakes in these basic questions.</p>\n<h2>Intro</h2>\n<h3>Introductory pitch</h3>\n<p>I often see people recommend preparing a pitch about your background and using it during the introduction part of the interview. Out of all candidates who I interviewed, I didn’t remember any of that and it didn’t have any impact on the interview results. So, I recommend not wasting your time, limiting the intro to just a few sentences, and getting on with the actual interview ASAP.</p>\n<blockquote>\n<p><strong>Pro Tip:</strong> Keep your introductory pitch as short as possible.</p>\n</blockquote>\n<h3>First impression</h3>\n<p>To get the first impression about the candidate and also help them feel more comfortable, I usually ask about their recent experience or what is their favorite thing at work. It’s a “Tell me about yourself” question, but more specific. </p>\n<p><strong>Question.</strong> Tell me about some interesting or challenging problem you worked on this year.</p>\n<p>This question allows me to assess person’s communication skills and is supposed to help the candidate relax. After all, I am asking about something they are very familiar with and should be comfortable talking about.</p>\n<p>Sometimes, I would get candidates who would tell me that they didn’t have anything interesting or challenging in their past project. Some people had something interesting but would struggle to explain it to me.</p>\n<p><strong>Question.</strong> What is your best skill in software engineering? Is it building the UI, thinking and iterating on the architecture, debugging, etc…? </p>\n<p>Or sometimes I would ask</p>\n<p><strong>Question.</strong> What is your favorite type of work in software engineering / Android development?</p>\n<p>Asking this type of questions helps me understand what motivates candidates in their work. It also allows me to choose subsequent questions, based on a person’s strengths/weaknesses.</p>\n<p>There is no right or wrong answer, of course, but what candidates will tell and how they will tell me will give me the first impression. Saying “I don’t have a preference.” or “I am good at everything” doesn’t carry any information. If you had years of experience, there should be something you are better at or something you like or hate doing in your work.</p>\n<blockquote>\n<p><strong>Pro Tip:</strong> Be passionate about stuff that you do and know what you are talking about.</p>\n</blockquote>\n<h2>Technical questions</h2>\n<p>After chatting about the candidate’s experience and motivations, I typically switch to technical questions. Depending on what interview round it is, it may be more focused on coding, Android framework, or architecture. </p>\n<h3>Java basics</h3>\n<p><strong>Question.</strong> What are the methods in java.lang.Object class?</p>\n<p>This question touches Java fundamentals and I use it to understand whether the candidate is familiar with equals/hashCode, wait()/notify() and finalize(). The conversation will often lead us to the topic of HashMap or concurrency or how memory works in JVM.</p>\n<p>Other questions in this family:</p>\n<p><strong>Question.</strong> When do you need to override equals / hashCode? What can happen if I don’t override hashCode?</p>\n<p><strong>Question.</strong> How are objects compared in Java? What about arrays?</p>\n<p>I still get candidates with several years of experience telling me equals compares by class fields automatically.</p>\n<h3>Kotlin basics</h3>\n<p>Kotlin has been an official programming language on Android for years, and many companies have switched their entire codebase to it. Knowing this programming language is not a requirement, because it can be learned pretty quickly. However, when a candidate tells me they write in Kotlin, I at least ask some basic questions to check their understanding of fundamentals.</p>\n<p>Examples of such questions:</p>\n<p><strong>Question.</strong> What is a data class and how does it work?</p>\n<p><strong>Question.</strong> What is Any, Unit, and Nothing in Kotlin?</p>\n<p>How can you use it all the time and still be unable to give a complete and correct answer about it?!</p>\n<blockquote>\n<p><strong>Pro Tip</strong>. Study the basics of your programming language.</p>\n</blockquote>\n<h3>Network basics</h3>\n<p>Android engineers often build apps that interact with multiple API. We have to understand the basics of networking. To check that, I typically ask what happens when you go via URL in your browser.</p>\n<p><strong>Question.</strong> What happens when you enter a URL in your browser and hit ENTER?</p>\n<p>Even better:</p>\n<p><strong>Question.</strong> What happens when I call an API method in my Retrofit API?</p>\n<p>I like this question because it touches on client/server communication. I especially like to ask a candidate, who mentioned REST or Retrofit in their resume. It creates many topics for starting a conversation and tests a person’s depth and breadth of knowledge. </p>\n<p>Depending if this is a technical phone screen or an on-site round the expectations are different. On the phone screen, I’m satisfied if we just touch on the basics. </p>\n<p>On the on-site, we usually go deeper and talk about reflection, error handling strategies, how OkHttp client works, types of APIs, serialization, HTTP and other protocols, data encryption and security, caching, DNS, and all the other networking stuff… </p>\n<blockquote>\n<p><strong>Pro Tip.</strong> Know what happens during client/server communication.</p>\n</blockquote>\n<h3>Programming skills</h3>\n<p>Some of my colleagues like to ask FizzBuzz to sanity check a person’s ability to think and code. I find it too common and replace it with another trivial problem.</p>\n<p><strong>Question.</strong> Given a 32-bit integer, return it with its digits reversed. You can use any function from the standard library.</p>\n<p>This is a <a href=\"https://leetcode.com/problems/reverse-integer/\">Leetcode Easy</a> problem, with all conditions dropped. It can be solved either in a mathematical way with division by 10 or by reversing a string, both of which can be written in under 10 lines of code. Only 50% of the people I interviewed were able to write a working solution in 15 minutes.</p>\n<p>Yes, in real work you won’t be reversing integers. However, you will be working with numbers and strings, parsing data from files and network streams. This <em>type</em> of problem might come up during your work. Remember, I don’t only focus on the solution itself, but also on how arrived at it, what type of questions they ask and how they write their code. Clarifying questions, thinking about edge cases, communicating well, and writing simple readable code is as important as having a working solution.</p>\n<blockquote>\n<p><strong>Pro Tip.</strong> Approach the problem as if it is your work project.</p>\n</blockquote>\n<h2>Final thoughts</h2>\n<p>While the listed questions are quite easy, not everyone can confidently answer them. What I often see during the interviews, is that people try to guess the answer or have some invalid assumptions in their head about how things are. As a result, they are just giving incorrect answers. It is ok to not know something, nobody is perfect. But you should be honest with your interviewer and make sure to tell them that your answer is based on an assumption or you are just trying to guess it.</p>","fields":{"slug":"/easy-interview-questions","readingTime":{"text":"6 min read"}},"frontmatter":{"title":"Easy Interview Questions I Ask and Common Mistakes","date":"August 14, 2022","updated":"August 14, 2022","description":"Some easy questions I ask during tech-screen interviews that fail half of the candidates.","draft":true}},"previous":{"fields":{"slug":"/gradle-convention-plugins"},"frontmatter":{"title":"Refactor your Gradle build configuration with convention plugins"}},"next":{"fields":{"slug":"/compose-timer-implementation"},"frontmatter":{"title":"Countdown timer with Jetpack Compose"}}},"pageContext":{"id":"ca94b271-4455-5d88-af93-c4826fee576e","previousPostId":"8b4e60c2-2e47-548e-8d3c-b215c7998e90"}},"staticQueryHashes":["3000541721","3274528899"]}