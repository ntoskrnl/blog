{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/tips-for-junior-developers",
    "result": {"data":{"site":{"siteMetadata":{"title":"Anton Danshin's Blog"}},"markdownRemark":{"id":"966718d7-47b4-5a72-b2df-ae79d28dd11e","excerpt":"I have been working as an Android developer professionally for more than 6 years now. While it is not huge compared to many people out there, however, there are…","html":"<p>I have been working as an Android developer professionally for more than 6 years now. While it is not huge compared to many people out there, however, there are even more people who are just starting their software development career and might find my experience useful.</p>\n<p>In this article, I want to share my advice to all junior software developers that would help them work more efficiently and move faster along the career ladder.</p>\n<blockquote>\n<p><strong>Disclaimer:</strong> The following tips are based on my own experience and express my own opinion that I had at the moment of writing. Other people might have completely different views, and that’s ok!</p>\n</blockquote>\n<h2>General tips</h2>\n<p>Just some basic tips that any (especially) beginner developer should always follow, that would make an impact on your career.</p>\n<p><strong>1. Be proficient in your programming language.</strong> At work you will be dealing with high-level problems and thinking about how to write a for-loop, or “why this doesn’t compile?” will slow you down. Just like musicians, programmers must know their instrument and be able to write code with their eyes closed (e.g. without the help of the IDE). So, learn fundamentals, know how to write basic algorithms, know the standard library of your programming language, learn tools that you need to work with.</p>\n<p><strong>2. Always stay curious.</strong> Look in the internals and try to get the basic idea of how it works. If you don’t understand – ask. It is often important to know not just how something works but <strong>why</strong> it is done this way. So, don’t forget about the “why” question. It will help you to make your own decisions in the future.</p>\n<p><strong>3. Admit that you don’t know or understand something.</strong> No one knows everything, even senior developers. You are expected to have gaps in knowledge and can misunderstand something. Be honest with yourself, admit what you don’t know, and learn from your peers.</p>\n<p><strong>4. Learn about the product you are building.</strong> Understand what are the typical users and how they are interacting with the product. Learn about the product roadmap. Participate in feature discussions and try to contribute to the backlog by suggesting your ideas.</p>\n<p><strong>5. Don’t be shy to ask for help.</strong> If you are stuck, follow the tips below but always remember not to be afraid to ask your teammates for help. I think some people are just shy and don’t want to disturb senior peers, but this is a mistake. Juniors are expected to be asking questions. If you indeed ask too many questions, we will let you know.</p>\n<p><strong>6. Keep an eye on what’s happening around you.</strong> If you are working in the office, don’t ignore what’s happening around you. Some of my colleagues used to listen to music and missed out on some information that was briefly said by other team members. Make sure you have some idea of what’s going on in your team and the company, what are the priorities.</p>\n<h2>Get familiar with the company’s processes</h2>\n<p>When you start working in a company, it is important to learn about how things are done there.</p>\n<p><strong>1. Look into task workflows.</strong> Understand what are the main types of tasks you and your team have to deal with. Learn the workflow for each type of task. Pay special attention to how tasks are assigned, who is supposed to transition tasks from one status to another, and how tasks are resolved.</p>\n<p><strong>2. Understand how QA is done.</strong> All tasks undergo some kind of verification process. It will be extremely important to know how this is done in the company. Depending on when and how QA is involved in the development process, you might need to provide certain information to the QA, so that they can do their job more efficiently. Alternatively, you get test cases from QA to help you understand the requirements.</p>\n<p><strong>3. Understand the release process.</strong> Learn what happens to the featrue after development and QA are done. Depending on the company and the product, the release process maybe fullly automated or it can be done manually. In any case, it’s important to know how it happend the developed feature is delivered to the end used.</p>\n<p><strong>4. Learn git workflows in your team.</strong> Ask your team lead about git workflows. You will need to know what are the main and development branches and what you need to do when you start development. There might be conventions in naming branches as well as requirements for commit messages. Does the team use allow rebase? Do you need to squash commits, add tags? When shoud you delete your feature branch?</p>\n<p><strong>5. Follow the coding conventions of your team.</strong> TODO.</p>\n<h2>Get familiar with tools</h2>\n<p><strong>1. Use the same tools that your team is using.</strong> TODO.</p>\n<p><strong>2. Learn how to debug project on the local machine.</strong> TODO.</p>\n<p><strong>3. Learn about development / testing environments (if any).</strong> TODO.</p>\n<h2>Before starting new task</h2>\n<ol>\n<li>Understand the problem (what and why).</li>\n<li>Discuss the scope of work (what should be included what shouldn’t)</li>\n<li>Make sure you understand how it is supposed to be done.</li>\n<li>Learn about how it is going to be tested, released.</li>\n<li>If something is missing – Ask questions!</li>\n</ol>\n<h2>When working on the task</h2>\n<ol>\n<li>Work on your own branch, make commits.</li>\n<li>Tell about your progress / blockers to your mentor at least once a day.</li>\n<li>If you work on the task for several days, pull changes from parent once a day.</li>\n</ol>\n<h2>Troubleshoot if something doesn’t work</h2>\n<ol>\n<li>If it worked before – try to comment out some changes you made and see if it fixes the issue</li>\n<li>Use logging to identify where the problem starts to appear in the code</li>\n<li>Make sure your changes are applied: restart dev server / virtual machine, restart IDE, clear caches, reinitialize project</li>\n<li>Look at other examples of the same functionality in the project codebase or on the Internet and note the differences with your code.</li>\n<li>Go through the code from very start, verify logic, track data / event flow, make sure it is correct.</li>\n<li>Do not waste too much time (time limit troubleshooting process)</li>\n</ol>\n<h2>If you are stuck you have several options (choose any)</h2>\n<ol>\n<li>If it is late night – stop, there is high chance you will figure it out next morning.</li>\n<li>If the issue is not a blocker – switch something else for a while, then come back to it.</li>\n<li>Tell your peers about the problem in a team’s group chat, ask for help (sometimes while you explain the problem, you will realize where the issue is).</li>\n<li>Tell your mentor about the problem, ask for help</li>\n<li>Try to reproduce a bug in a simple setup (sandbox project), it can give you a clue.</li>\n<li>Ask question on stack overflow</li>\n<li>Don’t fix it, look for workarounds / alternative ways to implement this</li>\n</ol>\n<h2>Before you make a pull-request</h2>\n<ol>\n<li>Review your own code!</li>\n<li>Remove all commented-out code</li>\n<li>Try not to change unrelated files (unless necessary)</li>\n<li>Format your code, make sure it follows same code style.</li>\n</ol>\n<h2>Pull request</h2>\n<ol>\n<li>Write short description about your change.</li>\n<li>Reference an issue / ticket that your PR is related to.</li>\n<li>Add a screenshot (if it is a UI change)</li>\n<li>Look how other people do PRs for reference.</li>\n<li>Leave comments to your code in PR to bring attention of the reviewers to particular places in the code.</li>\n</ol>\n<h2>Replying to code review comments</h2>\n<ol>\n<li>If you don’t understand clearly what comment asks you to do – ask for clarification.</li>\n<li>If you don’t understand why comment requests you to do it – ask why?</li>\n<li>Learn from your mistakes and try not to repeat them.</li>\n</ol>\n<h2>After you are done with the task</h2>\n<ol>\n<li>Take next one that was assigned to you.</li>\n<li>Ask your mentor / team lead for a new task.</li>\n</ol>\n<h2>If you don’t have a task</h2>\n<ol>\n<li>Continue learning through documentation / articles / books / online courses</li>\n<li>Contribute to code review – review other people’s PRs</li>\n<li>Look into project’s code base, learn how things work.</li>\n<li>Try to find a task for yourself in the project’s backlog.</li>\n<li>Find obvious issues in the code (it could be just code style issues) and fix it.</li>\n</ol>\n<h2>Reviewing other people’s code</h2>\n<ol>\n<li>Look at other people’s PR, learn from their code</li>\n<li>If you see places you don’t understand, you can leave a comment.</li>\n<li>If you notice violation of coding conventions – point it out in the comment.</li>\n<li>If you see something can be improved, always give reasons why you think so and try to suggest a better way.</li>\n</ol>\n<h2>Conclusion</h2>\n<p>TODO.</p>","fields":{"slug":"/tips-for-junior-developers","readingTime":{"text":"8 min read"}},"frontmatter":{"title":"My tips for junior developers","date":"October 25, 2021","updated":"October 25, 2021","description":"A list of things that should be followed by all beginner developers (in my opinion) to level-up faster.","draft":true}},"previous":{"fields":{"slug":"/compose-user-avatar-placeholder"},"frontmatter":{"title":"Material avatar placeholder in Jetpack Compose"}},"next":null},"pageContext":{"id":"966718d7-47b4-5a72-b2df-ae79d28dd11e","previousPostId":"8551b0a9-b199-5c6d-a06b-3f9f0a3b45bb"}},
    "staticQueryHashes": ["2841359383","3274528899"]}