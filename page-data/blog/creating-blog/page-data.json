{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/creating-blog/","result":{"data":{"site":{"siteMetadata":{"title":"Anton Danshin"}},"markdownRemark":{"id":"a3f0be7f-7426-5018-a202-49bc736289d8","excerpt":"As promised in my first blog post, I’m sharing how I set up a Gatsby blog and deployed it to Github Pages.\nThere is a lot of material on the Internet on this…","html":"<p>As promised in my first blog post, I’m sharing how I set up a Gatsby blog and deployed it to Github Pages.\nThere is a lot of material on the Internet on this particular topic, but I still want to document my experience in case I need to do it again.</p>\n<p>I split this into two posts. Here is what we’ll cover in this one:</p>\n<ol>\n<li>How to install Node.js and Gatsby on MacOS.</li>\n<li>How to create a blog from a blog-starter template.</li>\n<li>Explain project structure and how it works.</li>\n</ol>\n<p>Publishing to GitHub pages will be in the next post.</p>\n<h2>Installing our tools</h2>\n<p>To build a website with Gatsby.js, you need to install Node.js. Node is a JavaScript runtime built on Chrome’s javascript engine. Just like you need JRE to run Java apps, you also need some environment (e.g., a web-browser) to run javascript programs. Node.js lets you run javascript without the browser. It also comes with a package manager, which gives you access to thousands of libraries and tools.</p>\n<h3>Installing Node.js</h3>\n<p>You may go ahead and install the latest stable Node version. But because there are many versions of Node (just like with Java), and different projects might require different versions of Node, there is this tool called “nvm” or Node Version Manager. Usually, you would install this first and then use it to install a desired version of Node.js. The advantage of using nvm is that you can have several versions of Node.js and switch between them with a command.</p>\n<p>To install LTS version of Node.js on MacOS run these two commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># installing VVM</span>\nbrew <span class=\"token function\">install</span> nvm\n<span class=\"token comment\"># installing LTS version of Node.js</span>\nnvm <span class=\"token function\">install</span> --lts</code></pre></div>\n<p>Run <code class=\"language-text\">node --version</code> to check the installed version.</p>\n<h3>Installing Gatsby CLI</h3>\n<p>Gatsby.js is not just a JS framework, it’s a toolkit that, among other things, includes a development HTTP-server, web GraphQL IDE. To manage it all, they ship a command-line tool, aka <a href=\"https://www.gatsbyjs.com/docs/reference/gatsby-cli/\">Gatsby CLI</a>, which can be installed with <code class=\"language-text\">npm</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># install Gatsby CLI globally</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g gatsby-cli</code></pre></div>\n<h2>Creating a blog with Gatsby</h2>\n<p>You can create a new website with <code class=\"language-text\">gatsby new</code> and write initial boilerplate yourself, but CLI tools provide a convenient way to create a project from a variety of templates. I chose the simplest thing that is available out there, which is <a href=\"https://www.gatsbyjs.com/starters/gatsbyjs/gatsby-starter-blog\">Gatsby Starter Blog</a>.</p>\n<h3>Creating website from a template</h3>\n<p>Navigate to the directory where you want to create your project and run the following command (replace <code class=\"language-text\">YOUR-PROJECT-NAME-HERE</code> with the name of your project):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx gatsby new YOUR-PROJECT-NAME-HERE https://github.com/gatsbyjs/gatsby-starter-blog</code></pre></div>\n<p>Gatsby will create a directory and set up a website based on provided template.</p>\n<p>You can run your website with <code class=\"language-text\">gatsby develop</code>.</p>\n<h3>Project structure</h3>\n<p>Here is how my project structure looks like as of now:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">./\n├── package.json\n├── gatsby-browser.js\n├── gatsby-config.js\n├── gatsby-node.js\n├── src\n│   ├── components\n│   │   ├── bio.js\n│   │   ├── layout.js\n│   │   └── seo.js\n│   ├── images\n│   │   ├── gatsby-icon.png\n│   │   └── profile-pic.jpg\n│   ├── normalize.css\n│   ├── pages\n│   │   ├── 404.js\n│   │   ├── index.js\n│   │   └── using-typescript.tsx\n│   ├── style.css\n│   └── templates\n│       └── blog-post.js\n├── content\n│   └── blog\n│       ├── creating-blog\n│       │   └── index.md\n│       └── hello-world\n│           └── index.md\n├── public\n│   └──...\n└── static\n    └── ...</code></pre></div>\n<p>All these files and directories have the following functions:</p>\n<ul>\n<li><code class=\"language-text\">package.json</code> – is a file that lists project build config and dependencies.</li>\n<li><code class=\"language-text\">gatsby-config.js</code> – main configuration file of gatsby site, contains plugin declaration and setup.</li>\n<li><code class=\"language-text\">gatsby-browser.js</code> – allows customization/extension of default Gatsby settings affecting the browser.</li>\n<li><code class=\"language-text\">gatsby-node.js</code> – the main module that will be invoked by Gatsby to generate website pages.</li>\n<li><code class=\"language-text\">src</code> – the derectory with the website’s javascript code that will be run by Gatsby and <code class=\"language-text\">gatsby-node.js</code> to render pages.</li>\n<li><code class=\"language-text\">src/components</code> – a directory where we can put reusable react components.</li>\n<li><code class=\"language-text\">src/pages</code> – the code used to render pages: each js file will generate its own page.</li>\n<li><code class=\"language-text\">src/teplates</code> – similar to previous, but will be used for generating multiple pages (like blog posts).</li>\n<li><code class=\"language-text\">content</code> - contains directories with Markdown files that will be transformed into blog posts.</li>\n<li><code class=\"language-text\">public</code> – output directory with a generated website.</li>\n</ul>\n<h3>How it works</h3>\n<p>This is what happens when you run <code class=\"language-text\">gatsby develop</code>:</p>\n<ol>\n<li>Gatsby will run the code from <code class=\"language-text\">gatsby-node.js</code>, and applies plugins and config provided in <code class=\"language-text\">gatsby-config.js</code> and <code class=\"language-text\">gatsby-browser.js</code>.</li>\n<li>Gatsby will generate index and 404 pages using code defined in <code class=\"language-text\">src/pages</code> directory. They will be rendered with <code class=\"language-text\">Layout</code> component defined in <code class=\"language-text\">src/components/layout.js</code>.</li>\n<li>Pluging will be applied at different steps of the build process.\n<ul>\n<li>Particularly, plugin <code class=\"language-text\">gatsby-transformer-remark</code> will scan <code class=\"language-text\">contents</code> folder and transform all markdown into structured data, that can be retrieved with GraphQL API.</li>\n<li><code class=\"language-text\">gatsby-plugin-feed</code> will generate RSS feed.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">gatsby-node.js</code> will query for all blog posts and generate pages for them during build time using <code class=\"language-text\">src/templates/blog-post.js</code> component.</li>\n<li>Generated content is placed into <code class=\"language-text\">public</code> folder and served by local HTTP server at <code class=\"language-text\">http://localhost:8000/</code>.</li>\n</ol>\n<h3>Customizing your website</h3>\n<p>The main focus for me was to get rid of old content and figure out how everything works by tweaking some things. All I did is:</p>\n<ul>\n<li>Removed old content and replaced with my own (including site meta data).</li>\n<li>Fixed some CSS, e.g., fixed round avatar on Safari.</li>\n<li>Added two meta parameters to blog posts: “updated” and “draft” and used them in pages.</li>\n<li>Added read time estimate (via plugin <code class=\"language-text\">gatsby-remark-reading-time</code>).</li>\n</ul>\n<p>My initial impression of the code and project in general was pretty poor. I have only been using strongly typed languages, and when I first saw the code in the project, I thought it was a mess. I thought it would take me a lot of time to figure things out and get the blog going. In the end, I quickly picked up the main idea of how it works, and now it is not as scary as it initially seemed.</p>\n<h2>Conclusion</h2>\n<p>I’ve set up Node.js on my Mac, installed gatsby, and created a simple blog. In my next post, I will describe how I published the website to GitHub Pages and set up auto-deployment.</p>\n<p>Thanks for reading.</p>","fields":{"slug":"/creating-blog","readingTime":{"text":"6 min read"}},"frontmatter":{"title":"Publishing Gatsby blog. Part 1.","date":"September 22, 2021","updated":"September 22, 2021","description":"How I created a blog with Gatsby and published it to GitHub Pages. Part 1.","draft":false}},"previous":{"fields":{"slug":"/hello-world"},"frontmatter":{"title":"First blog post"}},"next":{"fields":{"slug":"/updating-to-android-gradle-plugin-7"},"frontmatter":{"title":"Upgraded my project to Android gradle plugin 7"}}},"pageContext":{"id":"a3f0be7f-7426-5018-a202-49bc736289d8","previousPostId":"7e122229-4b42-5acf-9e3a-87c7c6df91ec","nextPostId":"3d4de3dc-9dc4-5a81-a6fb-f33428fd18ab"}},"staticQueryHashes":["3000541721","3274528899"]}